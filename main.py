import telebot
from telebot import types
import sqlite3
import schedule
import time
from threading import Thread
import datetime
from config import token, admin_id

Bible = {
    '1': '–ª—É–∫–∞ 1', '2': '–ª—É–∫–∞ 1', '3': '–ª—É–∫–∞ 1', '4': '–ª—É–∫–∞ 1', '5': '–ª—É–∫–∞ 1',
    '6': '–ª—É–∫–∞ 1', '7': '–ª—É–∫–∞ 1', '8': '–ª—É–∫–∞ 1', '9': '–ª—É–∫–∞ 1', '10': '–ª—É–∫–∞ 1',
    '11': '–ª—É–∫–∞ 1', '12': '–ª—É–∫–∞ 1', '14': '–ª—É–∫–∞ 1', '15': '–ª—É–∫–∞ 1', '16': '–ª—É–∫–∞ 1',
    '17': '–ª—É–∫–∞ 1', '18': '–ª—É–∫–∞ 1', '19': '–ª—É–∫–∞ 1', '20': '–ª—É–∫–∞ 12', '21': '–ª—É–∫–∞ 1',
    '22': '–ª—É–∫–∞ 1', '23': '–ª—É–∫–∞ 1', '24': '–ª—É–∫–∞ 1', '25': '–ª—É–∫–∞ 1', '26': '–ª—É–∫–∞ 1',
    '27': '–ª—É–∫–∞ 1', '28': '–ª—É–∫–∞ 1', '29': '–ª—É–∫–∞ 1', '30': '–ª—É–∫–∞ 1', '31': '–ª—É–∫–∞ 1'
}

bot = telebot.TeleBot(token)

def get_db_connection():
    return sqlite3.connect("bible_bot.db")

def initialize_db():
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS Users (
                id INTEGER PRIMARY KEY,
                name TEXT,
                age INTEGER,
                second_name TEXT,
                yes_count INTEGER DEFAULT 0,
                last_yes_date TEXT DEFAULT ''
            )
        ''')
        conn.commit()

initialize_db()

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(text='–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å'), types.KeyboardButton(text='—á—Ç–æ —á–∏—Ç–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?'))
    user_id = message.chat.id

    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT id FROM Users WHERE id = ?', (user_id,))
        result = cursor.fetchone()

    if result:
        funk(message)
    else:
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –º–æ–ª–æ–¥—ë–∂–Ω—ã—Ö —Å–ª—É–∂–µ–Ω–∏–π, –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.')
        sing_in(message)

def sing_in(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:')
    bot.register_next_step_handler(message, save_name)

def save_name(message):
    name = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:')
    bot.register_next_step_handler(message, save_second_name, name)

def save_second_name(message, name):
    second_name = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')
    bot.register_next_step_handler(message, save_age, name, second_name)

def save_age(message, name, second_name):
    try:
        age = int(message.text)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton(text='–¥–∞'), types.KeyboardButton(text='–Ω–µ—Ç'))
        bot.send_message(
            message.chat.id,
            f'–ò–º—è: {name}\n–§–∞–º–∏–ª–∏—è: {second_name}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–í—Å–µ –≤–µ—Ä–Ω–æ?',
            reply_markup=markup
        )
        bot.register_next_step_handler(message, ask_true, name, second_name, age)
    except ValueError:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞.')
        bot.register_next_step_handler(message, save_age, name, second_name)

def ask_true(message, name, second_name, age):
    if message.text.lower() == '–¥–∞':
        user_id = message.chat.id
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                'INSERT INTO Users (id, name, second_name, age) VALUES (?, ?, ?, ?)',
                (user_id, name, second_name, age)
            )
            conn.commit()
        bot.send_message(message.chat.id, '–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')
        funk(message)
    elif message.text.lower() == '–Ω–µ—Ç':
        sing_in(message)
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.')
        bot.register_next_step_handler(message, ask_true, name, second_name, age)

def funk(message):
    user_id = message.chat.id
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT name FROM Users WHERE id = ?', (user_id,))
        name = cursor.fetchone()

    if name:
        name = name[0]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton(text='–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å'), types.KeyboardButton(text='—á—Ç–æ —á–∏—Ç–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?'))
        bot.send_message(
            message.chat.id,
            f'{name}, —Ç—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏:',
            reply_markup=markup
        )
        bot.register_next_step_handler(message, funk_check)
    else:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

def funk_check(message):
    if message.text == '–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å':
        bot.send_message(message.chat.id, '–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ: https://www.tinkoff.ru/rm/beshkarev.daniil1/Zv7pR81683\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ—Ç–∫—Ä—ã—Ç–æ–µ —Å–µ—Ä–¥—Ü–µ!')
        bot.register_next_step_handler(message, funk_check)
    elif message.text == '—á—Ç–æ —á–∏—Ç–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?':
        read(message.chat.id)
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.')
        bot.register_next_step_handler(message, funk_check)

def read(user_id):
    day = datetime.datetime.now().strftime("%d").lstrip('0')
    read = Bible.get(day, '—á—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ') 
    bot.send_message(chat_id=user_id, text=f'–°–µ–≥–æ–¥–Ω—è –∫ –ø—Ä–æ—á—Ç–µ–Ω–∏—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è: {read}\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—á–∏—Ç–∞–µ—à—å.')
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–ø—Ä–æ—á–∏—Ç–∞–ª', callback_data='yes'), types.InlineKeyboardButton(text='–Ω–µ –±—É–¥—É —Å–µ–≥–æ–¥–Ω—è —á–∏—Ç–∞—Ç—å', callback_data='no'))
    bot.send_message(chat_id=user_id, text='–í—ã–±–µ—Ä–∏—Ç–µ:', reply_markup=markup)
@bot.callback_query_handler(func=lambda call: True)
def check_read(call):
    user_id = call.message.chat.id
    today_date = datetime.date.today().isoformat()

    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT last_yes_date FROM Users WHERE id = ?', (user_id,))
        last_yes_date = cursor.fetchone()[0]

        if call.data == 'yes':
            if last_yes_date == today_date:
                bot.send_message(call.message.chat.id, '–í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏ —á—Ç–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.')
                funk(call.message)
            else:
                cursor.execute('UPDATE Users SET yes_count = yes_count + 1, last_yes_date = ? WHERE id = ?', (today_date, user_id))
                conn.commit()
                bot.send_message(call.message.chat.id, '–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!')
                funk(call.message)
            
            return
        elif call.data == 'no':
            bot.send_message(call.message.chat.id, '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!')
            funk(call.message)
            return

    


def send_statistics_to_admin():
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT name, second_name, yes_count FROM Users')
        stats = cursor.fetchall()

    if stats:
        stats_message = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á—Ç–µ–Ω–∏—è:\n\n"
        for name, second_name, yes_count in stats:
            stats_message += f'{name} {second_name}: –ø—Ä–æ—á–∏—Ç–∞–ª {yes_count} —Ä–∞–∑(–∞)\n'
        bot.send_message(admin_id, stats_message)
    else:
        bot.send_message(admin_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

def send_thursday_reminder():
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT id, name FROM Users')
        users = cursor.fetchall()

    for user_id, name in users:
        bot.send_message(chat_id=user_id, text=f'–ü—Ä–∏–≤–µ—Ç, {name}\n–ø—Ä–∏—Ö–æ–¥–∏ —Å–µ–≥–æ–¥–Ω—è –≤ 19:00 –Ω–∞ –º–æ–ª–æ–¥—ë–∂–Ω–æ–µ —Å–ª—É–∂–µ–Ω–∏–µ. –ë—É–¥—É —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –¥—Ä—É–∂–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ üòÅ')

def send_daily_reminder():
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT id FROM Users')
        users = cursor.fetchall()

    for user in users:
        user_id = user[0]
        read(user_id)

schedule.every().thursday.at("10:00").do(send_thursday_reminder)
schedule.every().day.at("14:00").do(send_daily_reminder)

def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(1)

Thread(target=run_schedule).start()

bot.polling(none_stop=True)
